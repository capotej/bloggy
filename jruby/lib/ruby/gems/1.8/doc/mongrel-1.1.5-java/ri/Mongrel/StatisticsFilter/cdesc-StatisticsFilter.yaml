--- !ruby/object:RI::ClassDescription 
includes: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Implements a few basic statistics for a particular URI. Register it anywhere
    you want in the request chain and it'll quickly gather some numbers for you to
    analyze. It is pretty fast, but don't put it out in production.
- !ruby/struct:SM::Flow::P 
  body: You should pass the filter to StatusHandler as StatusHandler.new(:stats_filter
    =&gt; stats). This lets you then hit the status URI you want and get these stats
    from a browser.
- !ruby/struct:SM::Flow::P 
  body: StatisticsFilter takes an option of :sample_rate. This is a number that's
    passed to rand and if that number gets hit then a sample is taken. This helps
    reduce the load and keeps the statistics valid (since sampling is a part of how
    they work).
- !ruby/struct:SM::Flow::P 
  body: The exception to :sample_rate is that inter-request time is sampled on every
    request. If this wasn't done then it wouldn't be accurate as a measure of time
    between requests.
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: stats
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: stats
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: dump
- !ruby/object:RI::MethodSummary 
  name: dump
- !ruby/object:RI::MethodSummary 
  name: process
- !ruby/object:RI::MethodSummary 
  name: process
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: new
full_name: Mongrel::StatisticsFilter
constants: []

superclass: HttpHandler
name: StatisticsFilter
