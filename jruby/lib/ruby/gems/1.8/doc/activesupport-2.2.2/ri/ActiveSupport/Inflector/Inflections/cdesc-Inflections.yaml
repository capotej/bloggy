--- !ruby/object:RI::ClassDescription 
includes: 
- !ruby/object:RI::IncludedModule 
  name: Singleton
comment: 
- !ruby/struct:SM::Flow::P 
  body: 'A singleton instance of this class is yielded by Inflector.inflections, which
    can then be used to specify additional inflection rules. Examples:'
- !ruby/struct:SM::Flow::VERB 
  body: "  ActiveSupport::Inflector.inflections do |inflect|\n    inflect.plural /^(ox)$/i, \
    '\\1\\2en'\n    inflect.singular /^(ox)en/i, '\\1'\n\n    inflect.irregular 'octopus', \
    'octopi'\n\n    inflect.uncountable &quot;equipment&quot;\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: New rules are added at the top. So in the example above, the irregular rule
    for octopus will now be the first of the pluralization and singularization rules
    that is runs. This guarantees that your rules run before any of the rules that
    may already have been loaded.
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: humans
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: plurals
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: singulars
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: uncountables
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: clear
- !ruby/object:RI::MethodSummary 
  name: human
- !ruby/object:RI::MethodSummary 
  name: irregular
- !ruby/object:RI::MethodSummary 
  name: plural
- !ruby/object:RI::MethodSummary 
  name: singular
- !ruby/object:RI::MethodSummary 
  name: uncountable
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
full_name: ActiveSupport::Inflector::Inflections
constants: []

superclass: Object
name: Inflections
