--- !ruby/object:RI::ClassDescription 
includes: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: A cache store implementation which stores everything into memory in the same
    process. If you're running multiple Ruby on Rails server processes (which is the
    case if you're using mongrel_cluster or Phusion Passenger), then this means that
    your Rails server process instances won't be able to share cache data with each
    other. If your application never performs manual cache item expiry (e.g. when
    you're using generational cache keys), then using MemoryStore is ok. Otherwise,
    consider carefully whether you should be using this cache store.
- !ruby/struct:SM::Flow::P 
  body: MemoryStore is not only able to store strings, but also arbitrary Ruby objects.
- !ruby/struct:SM::Flow::P 
  body: MemoryStore is not thread-safe. Use SynchronizedMemoryStore instead if you
    need thread-safety.
attributes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: clear
- !ruby/object:RI::MethodSummary 
  name: delete
- !ruby/object:RI::MethodSummary 
  name: delete_matched
- !ruby/object:RI::MethodSummary 
  name: exist?
- !ruby/object:RI::MethodSummary 
  name: read
- !ruby/object:RI::MethodSummary 
  name: write
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
full_name: ActiveSupport::Cache::MemoryStore
constants: []

superclass: Store
name: MemoryStore
