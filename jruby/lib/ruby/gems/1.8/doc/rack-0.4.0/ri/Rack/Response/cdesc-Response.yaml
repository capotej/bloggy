--- !ruby/object:RI::ClassDescription 
includes: 
- !ruby/object:RI::IncludedModule 
  name: Helpers
comment: 
- !ruby/struct:SM::Flow::P 
  body: Rack::Response provides a convenient interface to create a Rack response.
- !ruby/struct:SM::Flow::P 
  body: It allows setting of headers and cookies, and provides useful defaults (a
    OK response containing HTML).
- !ruby/struct:SM::Flow::P 
  body: You can use Response#write to iteratively generate your response, but note
    that this is buffered by Rack::Response until you call <tt>finish</tt>. <tt>finish</tt>
    however can take a block inside which calls to <tt>write</tt> are syncronous with
    the Rack response.
- !ruby/struct:SM::Flow::P 
  body: Your application's <tt>call</tt> should end returning Response#finish.
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  rw: RW
  name: body
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: header
- !ruby/object:RI::Attribute 
  comment: 
  rw: RW
  name: status
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: '[]'
- !ruby/object:RI::MethodSummary 
  name: '[]='
- !ruby/object:RI::MethodSummary 
  name: close
- !ruby/object:RI::MethodSummary 
  name: delete_cookie
- !ruby/object:RI::MethodSummary 
  name: each
- !ruby/object:RI::MethodSummary 
  name: empty?
- !ruby/object:RI::MethodSummary 
  name: finish
- !ruby/object:RI::MethodSummary 
  name: set_cookie
- !ruby/object:RI::MethodSummary 
  name: to_a
- !ruby/object:RI::MethodSummary 
  name: write
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
full_name: Rack::Response
constants: []

superclass: Object
name: Response
