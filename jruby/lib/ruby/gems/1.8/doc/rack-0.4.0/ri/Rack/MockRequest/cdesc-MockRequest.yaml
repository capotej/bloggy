--- !ruby/object:RI::ClassDescription 
includes: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Rack::MockRequest helps testing your Rack application without actually using
    HTTP.
- !ruby/struct:SM::Flow::P 
  body: After performing a request on a URL with get/post/put/delete, it returns a
    MockResponse with useful helper methods for effective testing.
- !ruby/struct:SM::Flow::P 
  body: You can pass a hash with additional configuration to the get/post/put/delete.
- !ruby/object:SM::Flow::LIST 
  type: :NOTE
  contents: 
  - !ruby/struct:SM::Flow::LI 
    body: A String or IO-like to be used as rack.input.
    label: '<tt>:input</tt>:'
  - !ruby/struct:SM::Flow::LI 
    body: Raise a FatalWarning if the app writes to rack.errors.
    label: '<tt>:fatal</tt>:'
  - !ruby/struct:SM::Flow::LI 
    body: If true, wrap the application in a Rack::Lint.
    label: '<tt>:lint</tt>:'
attributes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: delete
- !ruby/object:RI::MethodSummary 
  name: get
- !ruby/object:RI::MethodSummary 
  name: post
- !ruby/object:RI::MethodSummary 
  name: put
- !ruby/object:RI::MethodSummary 
  name: request
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: env_for
- !ruby/object:RI::MethodSummary 
  name: new
full_name: Rack::MockRequest
constants: 
- !ruby/object:RI::Constant 
  comment: 
  value: '{       "rack.version" => [0,1],       "rack.input" => StringIO.new,       "rack.errors"
    => StringIO.new,       "rack.multithread" => true,       "rack.multiprocess" =>
    true,       "rack.run_once" => false,     }'
  name: DEFAULT_ENV
superclass: Object
name: MockRequest
