--- !ruby/object:RI::ClassDescription 
includes: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Active Record objects don't specify their attributes directly, but rather
    infer them from the table definition with which they're linked. Adding, removing,
    and changing attributes and their type is done directly in the database. Any change
    is instantly reflected in the Active Record objects. The mapping that binds a
    given Active Record class to a certain database table will happen automatically
    in most common cases, but can be overwritten for the uncommon ones.
- !ruby/struct:SM::Flow::P 
  body: See the mapping rules in table_name and the full example in link:files/README.html
    for more insight.
- !ruby/struct:SM::Flow::H 
  text: Creation
  level: 2
- !ruby/struct:SM::Flow::P 
  body: 'Active Records accept constructor parameters either in a hash or as a block.
    The hash method is especially useful when you''re receiving the data from somewhere
    else, like an HTTP request. It works like this:'
- !ruby/struct:SM::Flow::VERB 
  body: "  user = User.new(:name =&gt; &quot;David&quot;, :occupation =&gt; &quot;Code \
    Artist&quot;)\n  user.name # =&gt; &quot;David&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: 'You can also use block initialization:'
- !ruby/struct:SM::Flow::VERB 
  body: "  user = User.new do |u|\n    u.name = &quot;David&quot;\n    u.occupation \
    = &quot;Code Artist&quot;\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: 'And of course you can just create a bare object and specify the attributes
    after the fact:'
- !ruby/struct:SM::Flow::VERB 
  body: "  user = User.new\n  user.name = &quot;David&quot;\n  user.occupation = &quot;Code \
    Artist&quot;\n"
- !ruby/struct:SM::Flow::H 
  text: Conditions
  level: 2
- !ruby/struct:SM::Flow::P 
  body: 'Conditions can either be specified as a string, array, or hash representing
    the WHERE-part of an SQL statement. The array form is to be used when the condition
    input is tainted and requires sanitization. The string form can be used for statements
    that don''t involve tainted data. The hash form works much like the array form,
    except only equality and range is possible. Examples:'
- !ruby/struct:SM::Flow::VERB 
  body: "  class User &lt; ActiveRecord::Base\n    def self.authenticate_unsafely(user_name, \
    password)\n      find(:first, :conditions =&gt; &quot;user_name = '#{user_name}' \
    AND password = '#{password}'&quot;)\n    end\n\n    def self.authenticate_safely(user_name, \
    password)\n      find(:first, :conditions =&gt; [ &quot;user_name = ? AND password \
    = ?&quot;, user_name, password ])\n    end\n\n    def self.authenticate_safely_simply(user_name, \
    password)\n      find(:first, :conditions =&gt; { :user_name =&gt; user_name, \
    :password =&gt; password })\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: The <tt>authenticate_unsafely</tt> method inserts the parameters directly
    into the query and is thus susceptible to SQL-injection attacks if the <tt>user_name</tt>
    and <tt>password</tt> parameters come directly from an HTTP request. The <tt>authenticate_safely</tt>
    and <tt>authenticate_safely_simply</tt> both will sanitize the <tt>user_name</tt>
    and <tt>password</tt> before inserting them in the query, which will ensure that
    an attacker can't escape the query and fake the login (or worse).
- !ruby/struct:SM::Flow::P 
  body: 'When using multiple parameters in the conditions, it can easily become hard
    to read exactly what the fourth or fifth question mark is supposed to represent.
    In those cases, you can resort to named bind variables instead. That''s done by
    replacing the question marks with symbols and supplying a hash with values for
    the matching symbol keys:'
- !ruby/struct:SM::Flow::VERB 
  body: "  Company.find(:first, :conditions =&gt; [\n    &quot;id = :id AND name = \
    :name AND division = :division AND created_at &gt; :accounting_date&quot;,\n  \
    \  { :id =&gt; 3, :name =&gt; &quot;37signals&quot;, :division =&gt; &quot;First&quot;, \
    :accounting_date =&gt; '2005-01-01' }\n  ])\n"
- !ruby/struct:SM::Flow::P 
  body: 'Similarly, a simple hash without a statement will generate conditions based
    on equality with the SQL AND operator. For instance:'
- !ruby/struct:SM::Flow::VERB 
  body: "  Student.find(:all, :conditions =&gt; { :first_name =&gt; &quot;Harvey&quot;, \
    :status =&gt; 1 })\n  Student.find(:all, :conditions =&gt; params[:student])\n"
- !ruby/struct:SM::Flow::P 
  body: 'A range may be used in the hash to use the SQL BETWEEN operator:'
- !ruby/struct:SM::Flow::VERB 
  body: "  Student.find(:all, :conditions =&gt; { :grade =&gt; 9..12 })\n"
- !ruby/struct:SM::Flow::P 
  body: 'An array may be used in the hash to use the SQL IN operator:'
- !ruby/struct:SM::Flow::VERB 
  body: "  Student.find(:all, :conditions =&gt; { :grade =&gt; [9,11,12] })\n"
- !ruby/struct:SM::Flow::H 
  text: Overwriting default accessors
  level: 2
- !ruby/struct:SM::Flow::P 
  body: 'All column values are automatically available through basic accessors on
    the Active Record object, but sometimes you want to specialize this behavior.
    This can be done by overwriting the default accessors (using the same name as
    the attribute) and calling <tt>read_attribute(attr_name)</tt> and <tt>write_attribute(attr_name,
    value)</tt> to actually change things. Example:'
- !ruby/struct:SM::Flow::VERB 
  body: "  class Song &lt; ActiveRecord::Base\n    # Uses an integer of seconds to \
    hold the length of the song\n\n    def length=(minutes)\n      write_attribute(:length, \
    minutes.to_i * 60)\n    end\n\n    def length\n      read_attribute(:length) / \
    60\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: You can alternatively use <tt>self[:attribute]=(value)</tt> and <tt>self[:attribute]</tt>
    instead of <tt>write_attribute(:attribute, value)</tt> and <tt>read_attribute(:attribute)</tt>
    as a shorter form.
- !ruby/struct:SM::Flow::H 
  text: Attribute query methods
  level: 2
- !ruby/struct:SM::Flow::P 
  body: In addition to the basic accessors, query methods are also automatically available
    on the Active Record object. Query methods allow you to test whether an attribute
    value is present.
- !ruby/struct:SM::Flow::P 
  body: 'For example, an Active Record User with the <tt>name</tt> attribute has a
    <tt>name?</tt> method that you can call to determine whether the user has a name:'
- !ruby/struct:SM::Flow::VERB 
  body: "  user = User.new(:name =&gt; &quot;David&quot;)\n  user.name? # =&gt; true\n\
    \n  anonymous = User.new(:name =&gt; &quot;&quot;)\n  anonymous.name? # =&gt; \
    false\n"
- !ruby/struct:SM::Flow::H 
  text: Accessing attributes before they have been typecasted
  level: 2
- !ruby/struct:SM::Flow::P 
  body: Sometimes you want to be able to read the raw attribute data without having
    the column-determined typecast run its course first. That can be done by using
    the <tt>&lt;attribute&gt;_before_type_cast</tt> accessors that all attributes
    have. For example, if your Account model has a <tt>balance</tt> attribute, you
    can call <tt>account.balance_before_type_cast</tt> or <tt>account.id_before_type_cast</tt>.
- !ruby/struct:SM::Flow::P 
  body: This is especially useful in validation situations where the user might supply
    a string for an integer field and you want to display the original string back
    in an error message. Accessing the attribute normally would typecast the string
    to 0, which isn't what you want.
- !ruby/struct:SM::Flow::H 
  text: Dynamic attribute-based finders
  level: 2
- !ruby/struct:SM::Flow::P 
  body: Dynamic attribute-based finders are a cleaner way of getting (and/or creating)
    objects by simple queries without turning to SQL. They work by appending the name
    of an attribute to <tt>find_by_</tt>, <tt>find_last_by_</tt>, or <tt>find_all_by_</tt>,
    so you get finders like <tt>Person.find_by_user_name</tt>, <tt>Person.find_all_by_last_name</tt>,
    and <tt>Payment.find_by_transaction_id</tt>. So instead of writing <tt>Person.find(:first,
    :conditions =&gt; [&quot;user_name = ?&quot;, user_name])</tt>, you just do <tt>Person.find_by_user_name(user_name)</tt>.
    And instead of writing <tt>Person.find(:all, :conditions =&gt; [&quot;last_name
    = ?&quot;, last_name])</tt>, you just do <tt>Person.find_all_by_last_name(last_name)</tt>.
- !ruby/struct:SM::Flow::P 
  body: It's also possible to use multiple attributes in the same find by separating
    them with &quot;<em>and</em>&quot;, so you get finders like <tt>Person.find_by_user_name_and_password</tt>
    or even <tt>Payment.find_by_purchaser_and_state_and_country</tt>. So instead of
    writing <tt>Person.find(:first, :conditions =&gt; [&quot;user_name = ? AND password
    = ?&quot;, user_name, password])</tt>, you just do <tt>Person.find_by_user_name_and_password(user_name,
    password)</tt>.
- !ruby/struct:SM::Flow::P 
  body: It's even possible to use all the additional parameters to find. For example,
    the full interface for <tt>Payment.find_all_by_amount</tt> is actually <tt>Payment.find_all_by_amount(amount,
    options)</tt>. And the full interface to <tt>Person.find_by_user_name</tt> is
    actually <tt>Person.find_by_user_name(user_name, options)</tt>. So you could call
    <tt>Payment.find_all_by_amount(50, :order =&gt; &quot;created_on&quot;)</tt>.
    Also you may call <tt>Payment.find_last_by_amount(amount, options)</tt> returning
    the last record matching that amount and options.
- !ruby/struct:SM::Flow::P 
  body: 'The same dynamic finder style can be used to create the object if it doesn''t
    already exist. This dynamic finder is called with <tt>find_or_create_by_</tt>
    and will return the object if it already exists and otherwise creates it, then
    returns it. Protected attributes won''t be set unless they are given in a block.
    For example:'
- !ruby/struct:SM::Flow::VERB 
  body: "  # No 'Summer' tag exists\n  Tag.find_or_create_by_name(&quot;Summer&quot;) \
    # equal to Tag.create(:name =&gt; &quot;Summer&quot;)\n\n  # Now the 'Summer' \
    tag does exist\n  Tag.find_or_create_by_name(&quot;Summer&quot;) # equal to Tag.find_by_name(&quot;Summer&quot;)\n\
    \n  # Now 'Bob' exist and is an 'admin'\n  User.find_or_create_by_name('Bob', \
    :age =&gt; 40) { |u| u.admin = true }\n"
- !ruby/struct:SM::Flow::P 
  body: 'Use the <tt>find_or_initialize_by_</tt> finder if you want to return a new
    record without saving it first. Protected attributes won''t be set unless they
    are given in a block. For example:'
- !ruby/struct:SM::Flow::VERB 
  body: "  # No 'Winter' tag exists\n  winter = Tag.find_or_initialize_by_name(&quot;Winter&quot;)\n\
    \  winter.new_record? # true\n"
- !ruby/struct:SM::Flow::P 
  body: 'To find by a subset of the attributes to be used for instantiating a new
    object, pass a hash instead of a list of parameters. For example:'
- !ruby/struct:SM::Flow::VERB 
  body: "  Tag.find_or_create_by_name(:name =&gt; &quot;rails&quot;, :creator =&gt; \
    current_user)\n"
- !ruby/struct:SM::Flow::P 
  body: That will either find an existing tag named &quot;rails&quot;, or create a
    new one while setting the user that created it.
- !ruby/struct:SM::Flow::H 
  text: Saving arrays, hashes, and other non-mappable objects in text columns
  level: 2
- !ruby/struct:SM::Flow::P 
  body: 'Active Record can serialize any object in text columns using YAML. To do
    so, you must specify this with a call to the class method <tt>serialize</tt>.
    This makes it possible to store arrays, hashes, and other non-mappable objects
    without doing any additional work. Example:'
- !ruby/struct:SM::Flow::VERB 
  body: "  class User &lt; ActiveRecord::Base\n    serialize :preferences\n  end\n\
    \n  user = User.create(:preferences =&gt; { &quot;background&quot; =&gt; &quot;black&quot;, \
    &quot;display&quot; =&gt; large })\n  User.find(user.id).preferences # =&gt; { \
    &quot;background&quot; =&gt; &quot;black&quot;, &quot;display&quot; =&gt; large \
    }\n"
- !ruby/struct:SM::Flow::P 
  body: 'You can also specify a class option as the second parameter that''ll raise
    an exception if a serialized object is retrieved as a descendent of a class not
    in the hierarchy. Example:'
- !ruby/struct:SM::Flow::VERB 
  body: "  class User &lt; ActiveRecord::Base\n    serialize :preferences, Hash\n\
    \  end\n\n  user = User.create(:preferences =&gt; %w( one two three ))\n  User.find(user.id).preferences \
    \   # raises SerializationTypeMismatch\n"
- !ruby/struct:SM::Flow::H 
  text: Single table inheritance
  level: 2
- !ruby/struct:SM::Flow::P 
  body: 'Active Record allows inheritance by storing the name of the class in a column
    that by default is named &quot;type&quot; (can be changed by overwriting <tt>Base.inheritance_column</tt>).
    This means that an inheritance looking like this:'
- !ruby/struct:SM::Flow::VERB 
  body: "  class Company &lt; ActiveRecord::Base; end\n  class Firm &lt; Company; \
    end\n  class Client &lt; Company; end\n  class PriorityClient &lt; Client; end\n"
- !ruby/struct:SM::Flow::P 
  body: When you do <tt>Firm.create(:name =&gt; &quot;37signals&quot;)</tt>, this
    record will be saved in the companies table with type = &quot;Firm&quot;. You
    can then fetch this row again using <tt>Company.find(:first, &quot;name = '37signals'&quot;)</tt>
    and it will return a Firm object.
- !ruby/struct:SM::Flow::P 
  body: If you don't have a type column defined in your table, single-table inheritance
    won't be triggered. In that case, it'll work just like normal subclasses with
    no special magic for differentiating between them or reloading the right type
    with find.
- !ruby/struct:SM::Flow::P 
  body: 'Note, all the attributes for all the cases are kept in the same table. Read
    more: http://www.martinfowler.com/eaaCatalog/singleTableInheritance.html'
- !ruby/struct:SM::Flow::H 
  text: Connection to multiple databases in different models
  level: 2
- !ruby/struct:SM::Flow::P 
  body: Connections are usually created through ActiveRecord::Base.establish_connection
    and retrieved by ActiveRecord::Base.connection. All classes inheriting from ActiveRecord::Base
    will use this connection. But you can also set a class-specific connection. For
    example, if Course is an ActiveRecord::Base, but resides in a different database,
    you can just say <tt>Course.establish_connection</tt> and Course and all of its
    subclasses will use this connection instead.
- !ruby/struct:SM::Flow::P 
  body: This feature is implemented by keeping a connection pool in ActiveRecord::Base
    that is a Hash indexed by the class. If a connection is requested, the retrieve_connection
    method will go up the class-hierarchy until a connection is found in the connection
    pool.
- !ruby/struct:SM::Flow::H 
  text: Exceptions
  level: 2
- !ruby/object:SM::Flow::LIST 
  type: :BULLET
  contents: 
  - !ruby/struct:SM::Flow::LI 
    body: ActiveRecordError - Generic error class and superclass of all other errors
      raised by Active Record.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: AdapterNotSpecified - The configuration hash used in <tt>establish_connection</tt>
      didn't include an <tt>:adapter</tt> key.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: AdapterNotFound - The <tt>:adapter</tt> key used in <tt>establish_connection</tt>
      specified a non-existent adapter (or a bad spelling of an existing one).
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: AssociationTypeMismatch - The object assigned to the association wasn't
      of the type specified in the association definition.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: SerializationTypeMismatch - The serialized object wasn't of the class specified
      as the second parameter.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: ConnectionNotEstablished+ - No connection has been established. Use <tt>establish_connection</tt>
      before querying.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: RecordNotFound - No record responded to the <tt>find</tt> method. Either
      the row with the given ID doesn't exist or the row didn't meet the additional
      restrictions. Some <tt>find</tt> calls do not raise this exception to signal
      nothing was found, please check its documentation for further details.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: StatementInvalid - The database server rejected the SQL statement. The precise
      error is added in the message.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: MultiparameterAssignmentErrors - Collection of errors that occurred during
      a mass assignment using the <tt>attributes=</tt> method. The <tt>errors</tt>
      property of this exception contains an array of AttributeAssignmentError objects
      that should be inspected to determine which attributes triggered the errors.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: AttributeAssignmentError - An error occurred while doing a mass assignment
      through the <tt>attributes=</tt> method. You can inspect the <tt>attribute</tt>
      property of the exception object to determine which attribute triggered the
      error.
    label: '*'
- !ruby/struct:SM::Flow::P 
  body: '<b>Note</b>: The attributes listed are class-level attributes (accessible
    from both the class and instance level). So it''s possible to assign a logger
    to the class through <tt>Base.logger=</tt> which will then be used by all instances
    in the current object space.'
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Set this to true if this is an abstract class (see <tt>abstract_class?</tt>).
  rw: RW
  name: abstract_class
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: ==
- !ruby/object:RI::MethodSummary 
  name: '[]'
- !ruby/object:RI::MethodSummary 
  name: '[]='
- !ruby/object:RI::MethodSummary 
  name: attribute_for_inspect
- !ruby/object:RI::MethodSummary 
  name: attribute_names
- !ruby/object:RI::MethodSummary 
  name: attribute_present?
- !ruby/object:RI::MethodSummary 
  name: attributes
- !ruby/object:RI::MethodSummary 
  name: attributes=
- !ruby/object:RI::MethodSummary 
  name: attributes_before_type_cast
- !ruby/object:RI::MethodSummary 
  name: becomes
- !ruby/object:RI::MethodSummary 
  name: cache_key
- !ruby/object:RI::MethodSummary 
  name: clone
- !ruby/object:RI::MethodSummary 
  name: column_for_attribute
- !ruby/object:RI::MethodSummary 
  name: connection
- !ruby/object:RI::MethodSummary 
  name: decrement
- !ruby/object:RI::MethodSummary 
  name: decrement!
- !ruby/object:RI::MethodSummary 
  name: delete
- !ruby/object:RI::MethodSummary 
  name: destroy
- !ruby/object:RI::MethodSummary 
  name: eql?
- !ruby/object:RI::MethodSummary 
  name: freeze
- !ruby/object:RI::MethodSummary 
  name: frozen?
- !ruby/object:RI::MethodSummary 
  name: has_attribute?
- !ruby/object:RI::MethodSummary 
  name: hash
- !ruby/object:RI::MethodSummary 
  name: id
- !ruby/object:RI::MethodSummary 
  name: id=
- !ruby/object:RI::MethodSummary 
  name: increment
- !ruby/object:RI::MethodSummary 
  name: increment!
- !ruby/object:RI::MethodSummary 
  name: inspect
- !ruby/object:RI::MethodSummary 
  name: new_record?
- !ruby/object:RI::MethodSummary 
  name: readonly!
- !ruby/object:RI::MethodSummary 
  name: readonly?
- !ruby/object:RI::MethodSummary 
  name: reload
- !ruby/object:RI::MethodSummary 
  name: save
- !ruby/object:RI::MethodSummary 
  name: save!
- !ruby/object:RI::MethodSummary 
  name: to_param
- !ruby/object:RI::MethodSummary 
  name: toggle
- !ruby/object:RI::MethodSummary 
  name: toggle!
- !ruby/object:RI::MethodSummary 
  name: update_attribute
- !ruby/object:RI::MethodSummary 
  name: update_attributes
- !ruby/object:RI::MethodSummary 
  name: update_attributes!
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: ===
- !ruby/object:RI::MethodSummary 
  name: abstract_class?
- !ruby/object:RI::MethodSummary 
  name: aggregate_mapping
- !ruby/object:RI::MethodSummary 
  name: all
- !ruby/object:RI::MethodSummary 
  name: allow_concurrency
- !ruby/object:RI::MethodSummary 
  name: allow_concurrency=
- !ruby/object:RI::MethodSummary 
  name: attr_accessible
- !ruby/object:RI::MethodSummary 
  name: attr_protected
- !ruby/object:RI::MethodSummary 
  name: attr_readonly
- !ruby/object:RI::MethodSummary 
  name: base_class
- !ruby/object:RI::MethodSummary 
  name: benchmark
- !ruby/object:RI::MethodSummary 
  name: class_of_active_record_descendant
- !ruby/object:RI::MethodSummary 
  name: column_names
- !ruby/object:RI::MethodSummary 
  name: columns
- !ruby/object:RI::MethodSummary 
  name: columns_hash
- !ruby/object:RI::MethodSummary 
  name: compute_type
- !ruby/object:RI::MethodSummary 
  name: connected?
- !ruby/object:RI::MethodSummary 
  name: connection
- !ruby/object:RI::MethodSummary 
  name: connection_pool
- !ruby/object:RI::MethodSummary 
  name: content_columns
- !ruby/object:RI::MethodSummary 
  name: count_by_sql
- !ruby/object:RI::MethodSummary 
  name: create
- !ruby/object:RI::MethodSummary 
  name: decrement_counter
- !ruby/object:RI::MethodSummary 
  name: delete
- !ruby/object:RI::MethodSummary 
  name: delete_all
- !ruby/object:RI::MethodSummary 
  name: descends_from_active_record?
- !ruby/object:RI::MethodSummary 
  name: destroy
- !ruby/object:RI::MethodSummary 
  name: destroy_all
- !ruby/object:RI::MethodSummary 
  name: establish_connection
- !ruby/object:RI::MethodSummary 
  name: exists?
- !ruby/object:RI::MethodSummary 
  name: expand_hash_conditions_for_aggregates
- !ruby/object:RI::MethodSummary 
  name: find
- !ruby/object:RI::MethodSummary 
  name: find_by_sql
- !ruby/object:RI::MethodSummary 
  name: first
- !ruby/object:RI::MethodSummary 
  name: human_attribute_name
- !ruby/object:RI::MethodSummary 
  name: human_name
- !ruby/object:RI::MethodSummary 
  name: increment_counter
- !ruby/object:RI::MethodSummary 
  name: inheritance_column
- !ruby/object:RI::MethodSummary 
  name: inspect
- !ruby/object:RI::MethodSummary 
  name: last
- !ruby/object:RI::MethodSummary 
  name: merge_conditions
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: primary_key
- !ruby/object:RI::MethodSummary 
  name: readonly_attributes
- !ruby/object:RI::MethodSummary 
  name: remove_connection
- !ruby/object:RI::MethodSummary 
  name: reset_column_information
- !ruby/object:RI::MethodSummary 
  name: respond_to?
- !ruby/object:RI::MethodSummary 
  name: retrieve_connection
- !ruby/object:RI::MethodSummary 
  name: sanitize_sql_array
- !ruby/object:RI::MethodSummary 
  name: sanitize_sql_for_assignment
- !ruby/object:RI::MethodSummary 
  name: sanitize_sql_for_conditions
- !ruby/object:RI::MethodSummary 
  name: sanitize_sql_hash_for_assignment
- !ruby/object:RI::MethodSummary 
  name: sanitize_sql_hash_for_conditions
- !ruby/object:RI::MethodSummary 
  name: serialize
- !ruby/object:RI::MethodSummary 
  name: serialized_attributes
- !ruby/object:RI::MethodSummary 
  name: set_inheritance_column
- !ruby/object:RI::MethodSummary 
  name: set_primary_key
- !ruby/object:RI::MethodSummary 
  name: set_sequence_name
- !ruby/object:RI::MethodSummary 
  name: set_table_name
- !ruby/object:RI::MethodSummary 
  name: silence
- !ruby/object:RI::MethodSummary 
  name: sti_name
- !ruby/object:RI::MethodSummary 
  name: table_exists?
- !ruby/object:RI::MethodSummary 
  name: table_name
- !ruby/object:RI::MethodSummary 
  name: update
- !ruby/object:RI::MethodSummary 
  name: update_all
- !ruby/object:RI::MethodSummary 
  name: update_counters
- !ruby/object:RI::MethodSummary 
  name: verification_timeout
- !ruby/object:RI::MethodSummary 
  name: verification_timeout=
- !ruby/object:RI::MethodSummary 
  name: with_exclusive_scope
- !ruby/object:RI::MethodSummary 
  name: with_scope
full_name: ActiveRecord::Base
constants: 
- !ruby/object:RI::Constant 
  comment: 
  value: '[ :conditions, :include, :joins, :limit, :offset,                                :order,
    :select, :readonly, :group, :from, :lock ]'
  name: VALID_FIND_OPTIONS
superclass: Object
name: Base
