--- !ruby/object:RI::MethodDescription 
visibility: public
block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: 'Specifies a one-to-many association. The following methods for retrieval
    and query of collections of associated objects will be added:'
- !ruby/object:SM::Flow::LIST 
  type: :LABELED
  contents: 
  - !ruby/struct:SM::Flow::LI 
    body: Returns an array of all the associated objects. An empty array is returned
      if none are found.
    label: collection(force_reload = false)
  - !ruby/struct:SM::Flow::LI 
    body: Adds one or more objects to the collection by setting their foreign keys
      to the collection's primary key.
    label: collection<<(object, ...)
  - !ruby/struct:SM::Flow::LI 
    body: Removes one or more objects from the collection by setting their foreign
      keys to <tt>NULL</tt>. Objects will be in addition destroyed if they're associated
      with <tt>:dependent =&gt; :destroy</tt>, and deleted if they're associated with
      <tt>:dependent =&gt; :delete_all</tt>.
    label: collection.delete(object, ...)
  - !ruby/struct:SM::Flow::LI 
    body: Replaces the collections content by deleting and adding objects as appropriate.
    label: collection=objects
  - !ruby/struct:SM::Flow::LI 
    body: Returns an array of the associated objects' ids
    label: collection_singular_ids
  - !ruby/struct:SM::Flow::LI 
    body: Replace the collection with the objects identified by the primary keys in
      <tt>ids</tt>
    label: collection_singular_ids=ids
  - !ruby/struct:SM::Flow::LI 
    body: Removes every object from the collection. This destroys the associated objects
      if they are associated with <tt>:dependent =&gt; :destroy</tt>, deletes them
      directly from the database if <tt>:dependent =&gt; :delete_all</tt>, otherwise
      sets their foreign keys to <tt>NULL</tt>.
    label: collection.clear
  - !ruby/struct:SM::Flow::LI 
    body: Returns <tt>true</tt> if there are no associated objects.
    label: collection.empty?
  - !ruby/struct:SM::Flow::LI 
    body: Returns the number of associated objects.
    label: collection.size
  - !ruby/struct:SM::Flow::LI 
    body: Finds an associated object according to the same rules as ActiveRecord::Base.find.
    label: collection.find(...)
  - !ruby/struct:SM::Flow::LI 
    body: Checks whether an associated object with the given conditions exists. Uses
      the same rules as ActiveRecord::Base.exists?.
    label: collection.exist?(...)
  - !ruby/struct:SM::Flow::LI 
    body: Returns one or more new objects of the collection type that have been instantiated
      with <tt>attributes</tt> and linked to this object through a foreign key, but
      have not yet been saved. <b>Note:</b> This only works if an associated object
      already exists, not if it's <tt>nil</tt>!
    label: collection.build(attributes = {}, ...)
  - !ruby/struct:SM::Flow::LI 
    body: Returns a new object of the collection type that has been instantiated with
      <tt>attributes</tt>, linked to this object through a foreign key, and that has
      already been saved (if it passed the validation). <b>Note:</b> This only works
      if an associated object already exists, not if it's <tt>nil</tt>!
    label: collection.create(attributes = {})
- !ruby/struct:SM::Flow::P 
  body: '(<b>Note</b>: <tt>collection</tt> is replaced with the symbol passed as the
    first argument, so <tt>has_many :clients</tt> would add among others <tt>clients.empty?</tt>.)'
- !ruby/struct:SM::Flow::H 
  text: Example
  level: 3
- !ruby/struct:SM::Flow::P 
  body: 'Example: A Firm class declares <tt>has_many :clients</tt>, which will add:'
- !ruby/object:SM::Flow::LIST 
  type: :BULLET
  contents: 
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients</tt> (similar to <tt>Clients.find :all, :conditions =&gt;
      [&quot;firm_id = ?&quot;, id]</tt>)
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients&lt;&lt;</tt>
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients.delete</tt>
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients=</tt>
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#client_ids</tt>
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#client_ids=</tt>
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients.clear</tt>
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients.empty?</tt> (similar to <tt>firm.clients.size == 0</tt>)
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: '<tt>Firm#clients.size</tt> (similar to <tt>Client.count &quot;firm_id =
      #{id}&quot;</tt>)'
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: '<tt>Firm#clients.find</tt> (similar to <tt>Client.find(id, :conditions
      =&gt; &quot;firm_id = #{id}&quot;)</tt>)'
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients.exist?(:name =&gt; 'ACME')</tt> (similar to <tt>Client.exist?(:name
      =&gt; 'ACME', :firm_id =&gt; firm.id)</tt>)
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients.build</tt> (similar to <tt>Client.new(&quot;firm_id&quot;
      =&gt; id)</tt>)
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: <tt>Firm#clients.create</tt> (similar to <tt>c = Client.new(&quot;firm_id&quot;
      =&gt; id); c.save; c</tt>)
    label: '*'
- !ruby/struct:SM::Flow::P 
  body: The declaration can also include an options hash to specialize the behavior
    of the association.
- !ruby/struct:SM::Flow::H 
  text: Supported options
  level: 3
- !ruby/object:SM::Flow::LIST 
  type: :LABELED
  contents: 
  - !ruby/struct:SM::Flow::LI 
    body: Specify the class name of the association. Use it only if that name can't
      be inferred from the association name. So <tt>has_many :products</tt> will by
      default be linked to the Product class, but if the real class name is SpecialProduct,
      you'll have to specify it with this option.
    label: ":class_name"
  - !ruby/struct:SM::Flow::LI 
    body: Specify the conditions that the associated objects must meet in order to
      be included as a <tt>WHERE</tt> SQL fragment, such as <tt>price &gt; 5 AND name
      LIKE 'B%'</tt>. Record creations from the association are scoped if a hash is
      used. <tt>has_many :posts, :conditions =&gt; {:published =&gt; true}</tt> will
      create published posts with <tt>@blog.posts.create</tt> or <tt>@blog.posts.build</tt>.
    label: ":conditions"
  - !ruby/struct:SM::Flow::LI 
    body: Specify the order in which the associated objects are returned as an <tt>ORDER
      BY</tt> SQL fragment, such as <tt>last_name, first_name DESC</tt>.
    label: ":order"
  - !ruby/struct:SM::Flow::LI 
    body: Specify the foreign key used for the association. By default this is guessed
      to be the name of this class in lower-case and &quot;_id&quot; suffixed. So
      a Person class that makes a <tt>has_many</tt> association will use &quot;person_id&quot;
      as the default <tt>:foreign_key</tt>.
    label: ":foreign_key"
  - !ruby/struct:SM::Flow::LI 
    body: Specify the method that returns the primary key used for the association.
      By default this is <tt>id</tt>.
    label: ":primary_key"
  - !ruby/struct:SM::Flow::LI 
    body: If set to <tt>:destroy</tt> all the associated objects are destroyed alongside
      this object by calling their <tt>destroy</tt> method. If set to <tt>:delete_all</tt>
      all associated objects are deleted <b>without</b> calling their <tt>destroy</tt>
      method. If set to <tt>:nullify</tt> all associated objects' foreign keys are
      set to <tt>NULL</tt> <b>without</b> calling their <tt>save</tt> callbacks. *Warning:*
      This option is ignored when also using the <tt>:through</tt> option.
    label: ":dependent"
  - !ruby/struct:SM::Flow::LI 
    body: 'Specify a complete SQL statement to fetch the association. This is a good
      way to go for complex associations that depend on multiple tables. Note: When
      this option is used, <tt>find_in_collection</tt> is <em>not</em> added.'
    label: ":finder_sql"
  - !ruby/struct:SM::Flow::LI 
    body: Specify a complete SQL statement to fetch the size of the association. If
      <tt>:finder_sql</tt> is specified but not <tt>:counter_sql</tt>, <tt>:counter_sql</tt>
      will be generated by replacing <tt>SELECT ... FROM</tt> with <tt>SELECT COUNT(*)
      FROM</tt>.
    label: ":counter_sql"
  - !ruby/struct:SM::Flow::LI 
    body: Specify a named module for extending the proxy. See &quot;Association extensions&quot;.
    label: ":extend"
  - !ruby/struct:SM::Flow::LI 
    body: Specify second-order associations that should be eager loaded when the collection
      is loaded.
    label: ":include"
  - !ruby/struct:SM::Flow::LI 
    body: An attribute name by which the result should be grouped. Uses the <tt>GROUP
      BY</tt> SQL-clause.
    label: ":group"
  - !ruby/struct:SM::Flow::LI 
    body: An integer determining the limit on the number of rows that should be returned.
    label: ":limit"
  - !ruby/struct:SM::Flow::LI 
    body: An integer determining the offset from where the rows should be fetched.
      So at 5, it would skip the first 4 rows.
    label: ":offset"
  - !ruby/struct:SM::Flow::LI 
    body: By default, this is <tt>*</tt> as in <tt>SELECT * FROM</tt>, but can be
      changed if you, for example, want to do a join but not include the joined columns.
      Do not forget to include the primary and foreign keys, otherwise it will raise
      an error.
    label: ":select"
  - !ruby/struct:SM::Flow::LI 
    body: Specifies a polymorphic interface (See <tt>belongs_to</tt>).
    label: ":as"
  - !ruby/struct:SM::Flow::LI 
    body: Specifies a Join Model through which to perform the query. Options for <tt>:class_name</tt>
      and <tt>:foreign_key</tt> are ignored, as the association uses the source reflection.
      You can only use a <tt>:through</tt> query through a <tt>belongs_to</tt> or
      <tt>has_many</tt> association on the join model.
    label: ":through"
  - !ruby/struct:SM::Flow::LI 
    body: Specifies the source association name used by <tt>has_many :through</tt>
      queries. Only use it if the name cannot be inferred from the association. <tt>has_many
      :subscribers, :through =&gt; :subscriptions</tt> will look for either <tt>:subscribers</tt>
      or <tt>:subscriber</tt> on Subscription, unless a <tt>:source</tt> is given.
    label: ":source"
  - !ruby/struct:SM::Flow::LI 
    body: Specifies type of the source association used by <tt>has_many :through</tt>
      queries where the source association is a polymorphic <tt>belongs_to</tt>.
    label: ":source_type"
  - !ruby/struct:SM::Flow::LI 
    body: If true, duplicates will be omitted from the collection. Useful in conjunction
      with <tt>:through</tt>.
    label: ":uniq"
  - !ruby/struct:SM::Flow::LI 
    body: If true, all the associated objects are readonly through the association.
    label: ":readonly"
  - !ruby/struct:SM::Flow::LI 
    body: If false, don't validate the associated objects when saving the parent object.
      true by default.
    label: ":validate"
- !ruby/struct:SM::Flow::P 
  body: 'Option examples:'
- !ruby/struct:SM::Flow::VERB 
  body: "  has_many :comments, :order =&gt; &quot;posted_on&quot;\n  has_many :comments, \
    :include =&gt; :author\n  has_many :people, :class_name =&gt; &quot;Person&quot;, \
    :conditions =&gt; &quot;deleted = 0&quot;, :order =&gt; &quot;name&quot;\n  has_many \
    :tracks, :order =&gt; &quot;position&quot;, :dependent =&gt; :destroy\n  has_many \
    :comments, :dependent =&gt; :nullify\n  has_many :tags, :as =&gt; :taggable\n\
    \  has_many :reports, :readonly =&gt; true\n  has_many :subscribers, :through =&gt; \
    :subscriptions, :source =&gt; :user\n  has_many :subscribers, :class_name =&gt; \
    &quot;Person&quot;, :finder_sql =&gt;\n      'SELECT DISTINCT people.* ' +\n  \
    \    'FROM people p, post_subscriptions ps ' +\n      'WHERE ps.post_id = #{id} \
    AND ps.person_id = p.id ' +\n      'ORDER BY p.first_name'\n"
full_name: ActiveRecord::Associations::ClassMethods#has_many
params: (association_id, options = {}, &extension)
name: has_many
is_singleton: false
aliases: []

