--- !ruby/object:RI::ClassDescription 
includes: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: 'This module acts as a singleton returned/yielded by String.inflections, which
    is used to override or specify additional inflection rules. Examples:'
- !ruby/struct:SM::Flow::VERB 
  body: "  String.inflections do |inflect|\n    inflect.plural /^(ox)$/i, '\\1\\2en'\n\
    \    inflect.singular /^(ox)en/i, '\\1'\n\n    inflect.irregular 'octopus', 'octopi'\n\
    \n    inflect.uncountable &quot;equipment&quot;\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: New rules are added at the top. So in the example above, the irregular rule
    for octopus will now be the first of the pluralization and singularization rules
    that is runs. This guarantees that your rules run before any of the rules that
    may already have been loaded.
attributes: []

instance_methods: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: clear
- !ruby/object:RI::MethodSummary 
  name: irregular
- !ruby/object:RI::MethodSummary 
  name: plural
- !ruby/object:RI::MethodSummary 
  name: singular
- !ruby/object:RI::MethodSummary 
  name: uncountable
full_name: String::Inflections
constants: []

superclass: 
name: Inflections
