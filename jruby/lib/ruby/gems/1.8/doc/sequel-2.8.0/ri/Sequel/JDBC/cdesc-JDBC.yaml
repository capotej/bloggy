--- !ruby/object:RI::ClassDescription 
includes: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Houses Sequel's JDBC support when running on JRuby. Support for individual
    database types is done using sub adapters. PostgreSQL, MySQL, SQLite, Oracle,
    and MSSQL all have relatively good support, close the the level supported by the
    native adapter. PostgreSQL, MySQL, SQLite can load necessary support using the
    jdbc-* gem, if it is installed, though they will work if you have the correct
    .jar in your CLASSPATH. Oracle and MSSQL should load the necessary support if
    you have the .jar in your CLASSPATH. For all other databases, the Java class should
    be loaded manually before calling Sequel.connect.
- !ruby/struct:SM::Flow::P 
  body: Note that when using a JDBC adapter, the best way to use Sequel is via Sequel.connect,
    NOT Sequel.jdbc. Use the JDBC connection string when connecting, which will be
    in a different format than the native connection string. The connection string
    should start with 'jdbc:'. For PostgreSQL, use 'jdbc:postgresql:', and for SQLite
    you do not need 2 preceding slashes for the database name (use no preceding slashes
    for a relative path, and one preceding slash for an absolute path).
attributes: []

instance_methods: []

class_methods: []

full_name: Sequel::JDBC
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Contains procs keyed on sub adapter type that extend the given database
      object so it supports the correct database type.
  value: '{:postgresql=>proc do |db|         require ''sequel_core/adapters/jdbc/postgresql'''
  name: DATABASE_SETUP
superclass: 
name: JDBC
