--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: def_token
- !ruby/object:RI::MethodSummary 
  name: def_token
comment: 
- !ruby/struct:SM::Flow::P 
  body: Definitions of all tokens involved in the lexical analysis
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_BEG
  value: ":EXPR_BEG"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_MID
  value: ":EXPR_MID"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_END
  value: ":EXPR_END"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_ARG
  value: ":EXPR_ARG"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_FNAME
  value: ":EXPR_FNAME"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_DOT
  value: ":EXPR_DOT"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_CLASS
  value: ":EXPR_CLASS"
- !ruby/object:RI::Constant 
  comment: 
  name: Symbol
  value: Integer
- !ruby/object:RI::Constant 
  comment: 
  name: TokenDefinitions
  value: "[     [:TkCLASS,      TkId,  \"class\",  EXPR_CLASS],     [:TkMODULE,     TkId,  \"module\", EXPR_BEG],     [:TkDEF,        TkId,  \"def\",    EXPR_FNAME],     [:TkUNDEF,      TkId,  \"undef\",  EXPR_FNAME],     [:TkBEGIN,      TkId,  \"begin\",  EXPR_BEG],     [:TkRESCUE,     TkId,  \"rescue\", EXPR_MID],     [:TkENSURE,     TkId,  \"ensure\", EXPR_BEG],     [:TkEND,        TkId,  \"end\",    EXPR_END],     [:TkIF,         TkId,  \"if\",     EXPR_BEG, :TkIF_MOD],     [:TkUNLESS,     TkId,  \"unless\", EXPR_BEG, :TkUNLESS_MOD],     [:TkTHEN,       TkId,  \"then\",   EXPR_BEG],     [:TkELSIF,      TkId,  \"elsif\",  EXPR_BEG],     [:TkELSE,       TkId,  \"else\",   EXPR_BEG],     [:TkCASE,       TkId,  \"case\",   EXPR_BEG],     [:TkWHEN,       TkId,  \"when\",   EXPR_BEG],     [:TkWHILE,      TkId,  \"while\",  EXPR_BEG, :TkWHILE_MOD],     [:TkUNTIL,      TkId,  \"until\",  EXPR_BEG, :TkUNTIL_MOD],     [:TkFOR,        TkId,  \"for\",    EXPR_BEG],     [:TkBREAK,      TkId,  \"break\",  EXPR_END],     [:TkNEXT,       TkId,  \"next\",   EXPR_END],     [:TkREDO,       TkId,  \"redo\",   EXPR_END],     [:TkRETRY,      TkId,  \"retry\",  EXPR_END],     [:TkIN,         TkId,  \"in\",     EXPR_BEG],     [:TkDO,         TkId,  \"do\",     EXPR_BEG],     [:TkRETURN,     TkId,  \"return\", EXPR_MID],     [:TkYIELD,      TkId,  \"yield\",  EXPR_END],     [:TkSUPER,      TkId,  \"super\",  EXPR_END],     [:TkSELF,       TkId,  \"self\",   EXPR_END],     [:TkNIL,        TkId,  \"nil\",    EXPR_END],     [:TkTRUE,       TkId,  \"true\",   EXPR_END],     [:TkFALSE,      TkId,  \"false\",  EXPR_END],     [:TkAND,        TkId,  \"and\",    EXPR_BEG],     [:TkOR,         TkId,  \"or\",     EXPR_BEG],     [:TkNOT,        TkId,  \"not\",    EXPR_BEG],     [:TkIF_MOD,     TkId],     [:TkUNLESS_MOD, TkId],     [:TkWHILE_MOD,  TkId],     [:TkUNTIL_MOD,  TkId],     [:TkALIAS,      TkId,  \"alias\",    EXPR_FNAME],     [:TkDEFINED,    TkId,  \"defined?\", EXPR_END],     [:TklBEGIN,     TkId,  \"BEGIN\",    EXPR_END],     [:TklEND,       TkId,  \"END\",      EXPR_END],     [:Tk__LINE__,   TkId,  \"__LINE__\", EXPR_END],     [:Tk__FILE__,   TkId,  \"__FILE__\", EXPR_END],      [:TkIDENTIFIER, TkId],     [:TkFID,        TkId],     [:TkGVAR,       TkId],     [:TkCVAR,       TkId],     [:TkIVAR,       TkId],     [:TkCONSTANT,   TkId],      [:TkINTEGER,    TkVal],     [:TkFLOAT,      TkVal],     [:TkSTRING,     TkVal],     [:TkXSTRING,    TkVal],     [:TkREGEXP,     TkVal],     [:TkSYMBOL,     TkVal],      [:TkDSTRING,    TkNode],     [:TkDXSTRING,   TkNode],     [:TkDREGEXP,    TkNode],     [:TkNTH_REF,    TkNode],     [:TkBACK_REF,   TkNode],      [:TkUPLUS,      TkOp,   \"+@\"],     [:TkUMINUS,     TkOp,   \"-@\"],     [:TkPOW,        TkOp,   \"**\"],     [:TkCMP,        TkOp,   \"<=>\"],     [:TkEQ,         TkOp,   \"==\"],     [:TkEQQ,        TkOp,   \"===\"],     [:TkNEQ,        TkOp,   \"!=\"],     [:TkGEQ,        TkOp,   \">=\"],     [:TkLEQ,        TkOp,   \"<=\"],     [:TkANDOP,      TkOp,   \"&&\"],     [:TkOROP,       TkOp,   \"||\"],     [:TkMATCH,      TkOp,   \"=~\"],     [:TkNMATCH,     TkOp,   \"!~\"],     [:TkDOT2,       TkOp,   \"..\"],     [:TkDOT3,       TkOp,   \"...\"],     [:TkAREF,       TkOp,   \"[]\"],     [:TkASET,       TkOp,   \"[]=\"],     [:TkLSHFT,      TkOp,   \"<<\"],     [:TkRSHFT,      TkOp,   \">>\"],     [:TkCOLON2,     TkOp],     [:TkCOLON3,     TkOp], #   [:OPASGN,       TkOp],               # +=, -=  etc. #     [:TkASSOC,      TkOp,   \"=>\"],     [:TkQUESTION,   TkOp,   \"?\"],        #?     [:TkCOLON,      TkOp,   \":\"],        #:          [:TkfLPAREN],         # func( #     [:TkfLBRACK],         # func[ #     [:TkfLBRACE],         # func{ #     [:TkSTAR],            # *arg     [:TkAMPER],           # &arg #     [:TkSYMBEG],          # :SYMBOL      [:TkGT,         TkOp,   \">\"],     [:TkLT,         TkOp,   \"<\"],     [:TkPLUS,       TkOp,   \"+\"],     [:TkMINUS,      TkOp,   \"-\"],     [:TkMULT,       TkOp,   \"*\"],     [:TkDIV,        TkOp,   \"/\"],     [:TkMOD,        TkOp,   \"%\"],     [:TkBITOR,      TkOp,   \"|\"],     [:TkBITXOR,     TkOp,   \"^\"],     [:TkBITAND,     TkOp,   \"&\"],     [:TkBITNOT,     TkOp,   \"~\"],     [:TkNOTOP,      TkOp,   \"!\"],      [:TkBACKQUOTE,  TkOp,   \"`\"],      [:TkASSIGN,     Token,  \"=\"],     [:TkDOT,        Token,  \".\"],     [:TkLPAREN,     Token,  \"(\"],  #(exp)     [:TkLBRACK,     Token,  \"[\"],  #[arry]     [:TkLBRACE,     Token,  \"{\"],  #{hash}     [:TkRPAREN,     Token,  \")\"],     [:TkRBRACK,     Token,  \"]\"],     [:TkRBRACE,     Token,  \"}\"],     [:TkCOMMA,      Token,  \",\"],     [:TkSEMICOLON,  Token,  \";\"],      [:TkCOMMENT],     [:TkRD_COMMENT],     [:TkSPACE],     [:TkNL],     [:TkEND_OF_SCRIPT],      [:TkBACKSLASH,  TkUnknownChar,  \"\\\\\"],     [:TkAT,         TkUnknownChar,  \"@\"],     [:TkDOLLAR,     TkUnknownChar,  \"$\"],   ]"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "{reading =&gt; token_class} {reading =&gt; [token_class, *opt]}"
  name: TkReading2Token
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  name: TkSymbol2Token
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_BEG
  value: ":EXPR_BEG"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_MID
  value: ":EXPR_MID"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_END
  value: ":EXPR_END"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_ARG
  value: ":EXPR_ARG"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_FNAME
  value: ":EXPR_FNAME"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_DOT
  value: ":EXPR_DOT"
- !ruby/object:RI::Constant 
  comment: 
  name: EXPR_CLASS
  value: ":EXPR_CLASS"
- !ruby/object:RI::Constant 
  comment: 
  name: TokenDefinitions
  value: "[     [:TkCLASS,      TkKW,  \"class\",  EXPR_CLASS],     [:TkMODULE,     TkKW,  \"module\", EXPR_BEG],     [:TkDEF,        TkKW,  \"def\",    EXPR_FNAME],     [:TkUNDEF,      TkKW,  \"undef\",  EXPR_FNAME],     [:TkBEGIN,      TkKW,  \"begin\",  EXPR_BEG],     [:TkRESCUE,     TkKW,  \"rescue\", EXPR_MID],     [:TkENSURE,     TkKW,  \"ensure\", EXPR_BEG],     [:TkEND,        TkKW,  \"end\",    EXPR_END],     [:TkIF,         TkKW,  \"if\",     EXPR_BEG, :TkIF_MOD],     [:TkUNLESS,     TkKW,  \"unless\", EXPR_BEG, :TkUNLESS_MOD],     [:TkTHEN,       TkKW,  \"then\",   EXPR_BEG],     [:TkELSIF,      TkKW,  \"elsif\",  EXPR_BEG],     [:TkELSE,       TkKW,  \"else\",   EXPR_BEG],     [:TkCASE,       TkKW,  \"case\",   EXPR_BEG],     [:TkWHEN,       TkKW,  \"when\",   EXPR_BEG],     [:TkWHILE,      TkKW,  \"while\",  EXPR_BEG, :TkWHILE_MOD],     [:TkUNTIL,      TkKW,  \"until\",  EXPR_BEG, :TkUNTIL_MOD],     [:TkFOR,        TkKW,  \"for\",    EXPR_BEG],     [:TkBREAK,      TkKW,  \"break\",  EXPR_END],     [:TkNEXT,       TkKW,  \"next\",   EXPR_END],     [:TkREDO,       TkKW,  \"redo\",   EXPR_END],     [:TkRETRY,      TkKW,  \"retry\",  EXPR_END],     [:TkIN,         TkKW,  \"in\",     EXPR_BEG],     [:TkDO,         TkKW,  \"do\",     EXPR_BEG],     [:TkRETURN,     TkKW,  \"return\", EXPR_MID],     [:TkYIELD,      TkKW,  \"yield\",  EXPR_END],     [:TkSUPER,      TkKW,  \"super\",  EXPR_END],     [:TkSELF,       TkKW,  \"self\",   EXPR_END],     [:TkNIL,        TkKW,  \"nil\",    EXPR_END],     [:TkTRUE,       TkKW,  \"true\",   EXPR_END],     [:TkFALSE,      TkKW,  \"false\",  EXPR_END],     [:TkAND,        TkKW,  \"and\",    EXPR_BEG],     [:TkOR,         TkKW,  \"or\",     EXPR_BEG],     [:TkNOT,        TkKW,  \"not\",    EXPR_BEG],     [:TkIF_MOD,     TkKW],     [:TkUNLESS_MOD, TkKW],     [:TkWHILE_MOD,  TkKW],     [:TkUNTIL_MOD,  TkKW],     [:TkALIAS,      TkKW,  \"alias\",    EXPR_FNAME],     [:TkDEFINED,    TkKW,  \"defined?\", EXPR_END],     [:TklBEGIN,     TkKW,  \"BEGIN\",    EXPR_END],     [:TklEND,       TkKW,  \"END\",      EXPR_END],     [:Tk__LINE__,   TkKW,  \"__LINE__\", EXPR_END],     [:Tk__FILE__,   TkKW,  \"__FILE__\", EXPR_END],      [:TkIDENTIFIER, TkId],     [:TkFID,        TkId],     [:TkGVAR,       TkId],     [:TkIVAR,       TkId],     [:TkCONSTANT,   TkId],      [:TkINTEGER,    TkVal],     [:TkFLOAT,      TkVal],     [:TkSTRING,     TkVal],     [:TkXSTRING,    TkVal],     [:TkREGEXP,     TkVal],     [:TkCOMMENT,    TkVal],      [:TkDSTRING,    TkNode],     [:TkDXSTRING,   TkNode],     [:TkDREGEXP,    TkNode],     [:TkNTH_REF,    TkId],     [:TkBACK_REF,   TkId],      [:TkUPLUS,      TkOp,   \"+@\"],     [:TkUMINUS,     TkOp,   \"-@\"],     [:TkPOW,        TkOp,   \"**\"],     [:TkCMP,        TkOp,   \"<=>\"],     [:TkEQ,         TkOp,   \"==\"],     [:TkEQQ,        TkOp,   \"===\"],     [:TkNEQ,        TkOp,   \"!=\"],     [:TkGEQ,        TkOp,   \">=\"],     [:TkLEQ,        TkOp,   \"<=\"],     [:TkANDOP,      TkOp,   \"&&\"],     [:TkOROP,       TkOp,   \"||\"],     [:TkMATCH,      TkOp,   \"=~\"],     [:TkNMATCH,     TkOp,   \"!~\"],     [:TkDOT2,       TkOp,   \"..\"],     [:TkDOT3,       TkOp,   \"...\"],     [:TkAREF,       TkOp,   \"[]\"],     [:TkASET,       TkOp,   \"[]=\"],     [:TkLSHFT,      TkOp,   \"<<\"],     [:TkRSHFT,      TkOp,   \">>\"],     [:TkCOLON2,     TkOp],     [:TkCOLON3,     TkOp], #   [:OPASGN,       TkOp],               # +=, -=  etc. #     [:TkASSOC,      TkOp,   \"=>\"],     [:TkQUESTION,   TkOp,   \"?\"],        #?     [:TkCOLON,      TkOp,   \":\"],        #:          [:TkfLPAREN],         # func( #     [:TkfLBRACK],         # func[ #     [:TkfLBRACE],         # func{ #     [:TkSTAR],            # *arg     [:TkAMPER],           # &arg #     [:TkSYMBOL,     TkId],          # :SYMBOL     [:TkSYMBEG,     TkId],      [:TkGT,         TkOp,   \">\"],     [:TkLT,         TkOp,   \"<\"],     [:TkPLUS,       TkOp,   \"+\"],     [:TkMINUS,      TkOp,   \"-\"],     [:TkMULT,       TkOp,   \"*\"],     [:TkDIV,        TkOp,   \"/\"],     [:TkMOD,        TkOp,   \"%\"],     [:TkBITOR,      TkOp,   \"|\"],     [:TkBITXOR,     TkOp,   \"^\"],     [:TkBITAND,     TkOp,   \"&\"],     [:TkBITNOT,     TkOp,   \"~\"],     [:TkNOTOP,      TkOp,   \"!\"],      [:TkBACKQUOTE,  TkOp,   \"`\"],      [:TkASSIGN,     Token,  \"=\"],     [:TkDOT,        Token,  \".\"],     [:TkLPAREN,     Token,  \"(\"],  #(exp)     [:TkLBRACK,     Token,  \"[\"],  #[arry]     [:TkLBRACE,     Token,  \"{\"],  #{hash}     [:TkRPAREN,     Token,  \")\"],     [:TkRBRACK,     Token,  \"]\"],     [:TkRBRACE,     Token,  \"}\"],     [:TkCOMMA,      Token,  \",\"],     [:TkSEMICOLON,  Token,  \";\"],      [:TkRD_COMMENT],     [:TkSPACE],     [:TkNL],     [:TkEND_OF_SCRIPT],      [:TkBACKSLASH,  TkUnknownChar,  \"\\\\\"],     [:TkAT,         TkUnknownChar,  \"@\"],     [:TkDOLLAR,     TkUnknownChar,  \"\\$\"], #\"   ]"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "{reading =&gt; token_class} {reading =&gt; [token_class, *opt]}"
  name: TkReading2Token
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  name: TkSymbol2Token
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  name: NEWLINE_TOKEN
  value: TkNL.new(0,0)
full_name: RubyToken
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: Token
- !ruby/object:RI::MethodSummary 
  name: Token
- !ruby/object:RI::MethodSummary 
  name: set_token_position
name: RubyToken
superclass: 
