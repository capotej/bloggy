--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: all_symbols
- !ruby/object:RI::MethodSummary 
  name: yaml_new
comment: 
- !ruby/struct:SM::Flow::P 
  body: <tt>Symbol</tt> objects represent names and some strings inside the Ruby interpreter. They are generated using the <tt>:name</tt> and <tt>:&quot;string&quot;</tt> literals syntax, and by the various <tt>to_sym</tt> methods. The same <tt>Symbol</tt> object will be created for a given name or string for the duration of a program's execution, regardless of the context or meaning of that name. Thus if <tt>Fred</tt> is a constant in one context, a method in another, and a class in a third, the <tt>Symbol</tt> <tt>:Fred</tt> will be the same object in all three contexts.
- !ruby/struct:SM::Flow::VERB 
  body: "   module One\n     class Fred\n     end\n     $f1 = :Fred\n   end\n   module Two\n     Fred = 1\n     $f2 = :Fred\n   end\n   def Fred()\n   end\n   $f3 = :Fred\n   $f1.id   #=&gt; 2514190\n   $f2.id   #=&gt; 2514190\n   $f3.id   #=&gt; 2514190\n"
constants: []

full_name: Symbol
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: ===
- !ruby/object:RI::MethodSummary 
  name: dclone
- !ruby/object:RI::MethodSummary 
  name: id2name
- !ruby/object:RI::MethodSummary 
  name: inspect
- !ruby/object:RI::MethodSummary 
  name: to_i
- !ruby/object:RI::MethodSummary 
  name: to_int
- !ruby/object:RI::MethodSummary 
  name: to_s
- !ruby/object:RI::MethodSummary 
  name: to_sym
- !ruby/object:RI::MethodSummary 
  name: to_yaml
name: Symbol
superclass: Object
