--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: elements
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: The <tt>Vector</tt> class represents a mathematical vector, which is useful in its own right, and also constitutes a row or column of a Matrix.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Method Catalogue
- !ruby/struct:SM::Flow::P 
  body: "To create a Vector:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt> Vector.[](*array) </tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt> Vector.elements(array, copy = true) </tt>
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "To access elements:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt> [](i) </tt>
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "To enumerate the elements:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #each2(v) </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #collect2(v) </tt>"
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "Vector arithmetic:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt> *(x) &quot;is matrix or number&quot; </tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt> +(v) </tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt> -(v) </tt>
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "Vector functions:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #inner_product(v) </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #collect </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #map </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #map2(v) </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #r </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #size </tt>"
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "Conversion to other data types:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #covector </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #to_a </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #coerce(other) </tt>"
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "String representations:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #to_s </tt>"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt> #inspect </tt>"
  type: :BULLET
constants: []

full_name: Vector
includes: 
- !ruby/object:RI::IncludedModule 
  name: ExceptionForMatrix
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: "*"
- !ruby/object:RI::MethodSummary 
  name: +
- !ruby/object:RI::MethodSummary 
  name: "-"
- !ruby/object:RI::MethodSummary 
  name: ==
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: clone
- !ruby/object:RI::MethodSummary 
  name: coerce
- !ruby/object:RI::MethodSummary 
  name: collect
- !ruby/object:RI::MethodSummary 
  name: collect2
- !ruby/object:RI::MethodSummary 
  name: compare_by
- !ruby/object:RI::MethodSummary 
  name: covector
- !ruby/object:RI::MethodSummary 
  name: each2
- !ruby/object:RI::MethodSummary 
  name: eqn?
- !ruby/object:RI::MethodSummary 
  name: hash
- !ruby/object:RI::MethodSummary 
  name: init_elements
- !ruby/object:RI::MethodSummary 
  name: inner_product
- !ruby/object:RI::MethodSummary 
  name: inspect
- !ruby/object:RI::MethodSummary 
  name: map
- !ruby/object:RI::MethodSummary 
  name: map2
- !ruby/object:RI::MethodSummary 
  name: r
- !ruby/object:RI::MethodSummary 
  name: size
- !ruby/object:RI::MethodSummary 
  name: to_a
- !ruby/object:RI::MethodSummary 
  name: to_s
name: Vector
superclass: Object
