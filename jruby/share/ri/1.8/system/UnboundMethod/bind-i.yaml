--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Bind <em>umeth</em> to <em>obj</em>. If <tt>Klass</tt> was the class from which <em>umeth</em> was obtained, <tt>obj.kind_of?(Klass)</tt> must be true.
- !ruby/struct:SM::Flow::VERB 
  body: "   class A\n     def test\n       puts &quot;In test, class = #{self.class}&quot;\n     end\n   end\n   class B &lt; A\n   end\n   class C &lt; B\n   end\n\n   um = B.instance_method(:test)\n   bm = um.bind(C.new)\n   bm.call\n   bm = um.bind(B.new)\n   bm.call\n   bm = um.bind(A.new)\n   bm.call\n"
- !ruby/struct:SM::Flow::P 
  body: <em>produces:</em>
- !ruby/struct:SM::Flow::VERB 
  body: "   In test, class = C\n   In test, class = B\n   prog.rb:16:in `bind': bind argument must be an instance of B (TypeError)\n    from prog.rb:16\n"
full_name: UnboundMethod#bind
is_singleton: false
name: bind
params: |
  umeth.bind(obj) -> method

visibility: public
