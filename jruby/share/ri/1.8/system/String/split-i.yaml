--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Divides <em>str</em> into substrings based on a delimiter, returning an array of these substrings.
- !ruby/struct:SM::Flow::P 
  body: If <em>pattern</em> is a <tt>String</tt>, then its contents are used as the delimiter when splitting <em>str</em>. If <em>pattern</em> is a single space, <em>str</em> is split on whitespace, with leading whitespace and runs of contiguous whitespace characters ignored.
- !ruby/struct:SM::Flow::P 
  body: If <em>pattern</em> is a <tt>Regexp</tt>, <em>str</em> is divided where the pattern matches. Whenever the pattern matches a zero-length string, <em>str</em> is split into individual characters.
- !ruby/struct:SM::Flow::P 
  body: If <em>pattern</em> is omitted, the value of <tt>$;</tt> is used. If <tt>$;</tt> is <tt>nil</tt> (which is the default), <em>str</em> is split on whitespace as if ` ' were specified.
- !ruby/struct:SM::Flow::P 
  body: If the <em>limit</em> parameter is omitted, trailing null fields are suppressed. If <em>limit</em> is a positive number, at most that number of fields will be returned (if <em>limit</em> is <tt>1</tt>, the entire string is returned as the only entry in an array). If negative, there is no limit to the number of fields returned, and trailing null fields are not suppressed.
- !ruby/struct:SM::Flow::VERB 
  body: "   &quot; now's  the time&quot;.split        #=&gt; [&quot;now's&quot;, &quot;the&quot;, &quot;time&quot;]\n   &quot; now's  the time&quot;.split(' ')   #=&gt; [&quot;now's&quot;, &quot;the&quot;, &quot;time&quot;]\n   &quot; now's  the time&quot;.split(/ /)   #=&gt; [&quot;&quot;, &quot;now's&quot;, &quot;&quot;, &quot;the&quot;, &quot;time&quot;]\n   &quot;1, 2.34,56, 7&quot;.split(%r{,\\s*}) #=&gt; [&quot;1&quot;, &quot;2.34&quot;, &quot;56&quot;, &quot;7&quot;]\n   &quot;hello&quot;.split(//)               #=&gt; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]\n   &quot;hello&quot;.split(//, 3)            #=&gt; [&quot;h&quot;, &quot;e&quot;, &quot;llo&quot;]\n   &quot;hi mom&quot;.split(%r{\\s*})         #=&gt; [&quot;h&quot;, &quot;i&quot;, &quot;m&quot;, &quot;o&quot;, &quot;m&quot;]\n\n   &quot;mellow yellow&quot;.split(&quot;ello&quot;)   #=&gt; [&quot;m&quot;, &quot;w y&quot;, &quot;w&quot;]\n   &quot;1,2,,3,4,,&quot;.split(',')         #=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;&quot;, &quot;3&quot;, &quot;4&quot;]\n   &quot;1,2,,3,4,,&quot;.split(',', 4)      #=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;&quot;, &quot;3,4,,&quot;]\n   &quot;1,2,,3,4,,&quot;.split(',', -4)     #=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;&quot;, &quot;3&quot;, &quot;4&quot;, &quot;&quot;, &quot;&quot;]\n"
full_name: String#split
is_singleton: false
name: split
params: |
  str.split(pattern=$;, [limit])   => anArray

visibility: public
