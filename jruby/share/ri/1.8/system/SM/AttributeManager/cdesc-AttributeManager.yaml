--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: "NULL"
  value: "\"\\000\".freeze"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: We work by substituting non-printing characters in to the text. For now I'm assuming that I can substitute a character in the range 0..8 for a 7 bit character without damaging the encoded string, but this might be optimistic
  name: A_PROTECT
  value: "004"
- !ruby/object:RI::Constant 
  comment: 
  name: PROTECT_ATTR
  value: A_PROTECT.chr
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: This maps delimiters that occur around words (such as <b>bold</b> or <tt>tt</tt>) where the start and end delimiters and the same. This lets us optimize the regexp
  name: MATCHING_WORD_PAIRS
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: And this is used when the delimiters aren't the same. In this case the hash maps a pattern to the attribute character
  name: WORD_PAIR_MAP
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: This maps HTML tags to the corresponding attribute char
  name: HTML_TAGS
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: And this maps <em>special</em> sequences to a name. A special sequence is something like a WikiWord
  name: SPECIAL
  value: "{}"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A \ in front of a character that would normally be processed turns off processing. We do this by turning &lt; into &lt;#{PROTECT}
  name: PROTECTABLE
  value: "[ \"<\" << \"\\\\\" ]"
full_name: SM::AttributeManager
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: add_html
- !ruby/object:RI::MethodSummary 
  name: add_special
- !ruby/object:RI::MethodSummary 
  name: add_word_pair
- !ruby/object:RI::MethodSummary 
  name: attribute
- !ruby/object:RI::MethodSummary 
  name: change_attribute
- !ruby/object:RI::MethodSummary 
  name: changed_attribute_by_name
- !ruby/object:RI::MethodSummary 
  name: convert_attrs
- !ruby/object:RI::MethodSummary 
  name: convert_html
- !ruby/object:RI::MethodSummary 
  name: convert_specials
- !ruby/object:RI::MethodSummary 
  name: copy_string
- !ruby/object:RI::MethodSummary 
  name: display_attributes
- !ruby/object:RI::MethodSummary 
  name: flow
- !ruby/object:RI::MethodSummary 
  name: mask_protected_sequences
- !ruby/object:RI::MethodSummary 
  name: split_into_flow
- !ruby/object:RI::MethodSummary 
  name: unmask_protected_sequences
name: AttributeManager
superclass: Object
